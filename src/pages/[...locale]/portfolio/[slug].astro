---
const { slug } = Astro.params;

import ArrowForwardIosRounded from '../../../components/icons/ArrowForwardIosRounded.astro';
import PlayCircleOutlineRounded from '../../../components/icons/PlayCircleOutlineRounded.astro';

import type { GetStaticTypePathsType, Project } from '../../../types';
import { DEFAULT_LOCALE, LOCALES } from '../../../constants';

import { routes } from "../../../routes";
import { getLocaleFromUrl, useTranslations } from "../../../utils/i18n/utils";
import { projects } from '../../../utils/content/projects';

const locale = getLocaleFromUrl(Astro.url);
const t = useTranslations(locale);

const project: Project = projects[slug]({ locale });
const title = project.seo.title;
const description = project.seo.description;

import Layout from "../../../layouts/Layout.astro";
import Modal from '../../../components/Modal.astro';

export const getStaticPaths = async () => {
  const keys = Object.keys(projects || {});

  return keys.reduce<GetStaticTypePathsType[]>((accumulator, slug) => {
    LOCALES.forEach((lokale) => {
      const l = lokale === DEFAULT_LOCALE ? undefined : lokale;

      accumulator.push({ params: { slug, locale: l } });
    })

    return accumulator;
  }, [])
};
---
<script src="/src/scripts/video.js"></script>

<Layout title={title} description={description} active="portfolio">
  <section class="section project">
    <ol class="breadcrumb">
      <li>
        <a href={routes.root({ locale })} class="text-subtitle">
          {t('breadcrumb.home')}
        </a>
      </li>
      <li>
        <a href={routes.portfolio.root({ locale })} class="text-subtitle">
          {t('breadcrumb.portfolio')}
        </a>
      </li>
      <li>
        {project.section === 'multimedia' &&
          <a href={routes.portfolio.multimedia({ locale })} class="text-subtitle">
            {t('breadcrumb.multimedia')}
          </a>}
        {project.section === 'design' &&
          <a href={routes.portfolio.design({ locale })} class="text-subtitle">
            {t('breadcrumb.design')}
          </a>}
      </li>
      <li>
        <span>{project.name}</span>
      </li>
    </ol>

    <div class="title">
      <p class="text-title text-uppercase">{projects.category}</p>
      <h4 class="text-large">{projects.name}</h4>
    </div>

    <div class="content">
      <div class="credits">
        <div class="collaborators table">
          <div>
            <span class="table-header text-title text-uppercase">
              {t('portfolio.table-cell.year')}
            </span>

            <p class="table-cell">{project.year}</p>
          </div>

          <div>
            <span class="table-header text-title text-uppercase">
              {t('portfolio.table-cell.client')}
            </span>

            <p class="table-cell">{project.client}</p>
          </div>

          {project.illustration && project.illustration.length > 0 &&
            <div>
              <span class="table-header text-title text-uppercase">
                {t('portfolio.table-cell.illustration')}
              </span>

              {project.illustration.length > 1 &&
                <ul class="table-cell">
                  {project.illustration.map((illustrator) => { return <li>{illustrator}</li> })}
                </ul>}

              {project.illustration.length === 1 &&
                <p class="table-cell">{project.illustration[0]}</p>}
            </div>}

          {project.animation && project.animation.length > 0 &&
            <div>
              <span class="table-header text-title text-uppercase">
                {t('portfolio.table-cell.animation')}
              </span>

              {project.animation.length > 1 &&
                <ul class="table-cell">
                  {project.animation.map((animator) => { return <li>{animator}</li> })}
                </ul>}

              {project.animation.length === 1 &&
                <p class="table-cell">{project.animation[0]}</p>}
            </div>}

          {project.music && project.music.length > 0 &&
            <div>
              <span class="table-header text-title text-uppercase">
                {t('portfolio.table-cell.music')}
              </span>

              {project.music.length > 1 &&
                <ul class="table-cell">
                  {project.music.map((musician) => { return <li>{musician}</li> })}
                </ul>}

              {project.music.length === 1 &&
                <p class="table-cell">{project.music[0]}</p>}
            </div>}
        </div>

        {project.videoUrl.length > 0 &&
          <div class="video">
            <button id="video-player-button" class="video-thumbnail" data-video={project.videoUrl}>
              <img src={project.imageSrc} />

              <div class="overlay video-overlay">
                <PlayCircleOutlineRounded />
              </div>
            </button>
          </div>}

        {project.videoUrl.length === 0 &&
          <div class="image">
            <div class="image-thumbnail">
              <img src={project.imageSrc} />
            </div>
          </div>}
      </div>

      <div class="description">
        <div class="synopsis">
          <p class="text-title text-uppercase">
            {project.section === 'multimedia' ?
              t('portfolio.project.synopsis') : t('portfolio.project.description')}
          </p>

          <p class="text" set:html={project.synopsis}/>

          <a href={project.externalLink} class="btn full-width" target="_blank">
            {t(`portfolio.external-btn.${project.section}`)}
          </a>
        </div>

        {project.slides && project.slides.length > 0 &&
          <div class="splide gallery">
            <div class="splide__track">
              <ul class="splide__list">
                {project.slides.map((slide) => {
                  return <li class="splide__slide">
                    <img src={slide} />
                  </li>
                })}
              </ul>
            </div>

            <div class="splide__arrows">
              <button class="splide__arrow splide__arrow--prev">
                <ArrowForwardIosRounded />
              </button>
              <button class="splide__arrow splide__arrow--next">
                <ArrowForwardIosRounded />
              </button>
            </div>
          </div>}
      </div>
    </div>

    <Modal />

    <script is:inline>
      document.addEventListener('DOMContentLoaded', () => {
        const elements = document.getElementsByClassName('splide__slide');

        if(elements.length) {
          const splide = new Splide('.splide', {
            type: 'fade',
            rewind: true,
            pagination: false,
          });

          splide.mount();
        }
      });
    </script>
  </section>
</Layout>
